[gd_scene load_steps=4 format=3 uid="uid://d2o2rhr3ry21d"]

[ext_resource type="Script" path="res://editor/misc/selection_outline.gd" id="1_5x8i0"]
[ext_resource type="TileSet" uid="uid://56svi3hkvtjv" path="res://rendering/tiles/w1_tileset.tres" id="2_ioe1d"]

[sub_resource type="GDScript" id="GDScript_y404o"]
script/source = "extends Node2D

@onready var selection_outline: SelectionOutline = %SelectionOutline
@onready var tile_map: TileMap = %TileMap

var amount := 1
func _input(event: InputEvent) -> void:
	if event is InputEventKey:
		if event.pressed and event.keycode == KEY_RIGHT:
			amount += 1
		if event.pressed and event.keycode == KEY_LEFT:
			amount -= 1
			amount = max(1, amount)
		if event.pressed and event.keycode == KEY_SPACE:
			do_the_thing()
			queue_redraw()
		if event.pressed or event.is_echo():
			if event.keycode == KEY_R:
				var satisfaction := 0.0
				while satisfaction < 100:
					satisfaction += 1 if try_expand_one_rect() else 0.5
				queue_redraw()
	if event is InputEventMouseButton:
		if event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
			delete_rect_at_mouse()
	if event is InputEventMouseMotion:
		if Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
			delete_rect_at_mouse()

var rects := []

var _doing := false
func do_the_thing() -> void:
	if _doing: return
	_doing = true
	var used_rects := {}
	while true:
		var chosen_rects := []
		for i in amount:
			var rect = rects.pick_random()
			while rect in chosen_rects:
				rects.pick_random()
			chosen_rects.push_back(rect)
			if used_rects.has(rect):
				used_rects.erase(rect)
				selection_outline.remove_rect(rect)
			else:
				used_rects[rect] = true
				selection_outline.add_rect(rect)
		await selection_outline.done_for_now

func try_expand_one_rect() -> bool:
	var rect: Rect2i = rects.pick_random() as Rect2i
	var original_rect := rect
	rect = rect.grow_side(randi() % 4, 16)
	if not Rect2i(0, 0, 800, 608).encloses(rect): return false
	rects.erase(rect)
	var success := true
	var enclosed_rects := []
	for other_rect: Rect2i in rects:
		if other_rect.intersects(rect) and not rect.encloses(other_rect):
			success = false
			break
		if rect.encloses(other_rect):
			enclosed_rects.push_back(other_rect)
	if success:
		for other_rect in enclosed_rects:
			rects.erase(other_rect)
		rects.push_back(rect)
		return true
	else:
		rects.push_back(original_rect)
		return false 

func delete_rect_at_mouse() -> void:
	if _doing: return
	var mouse_pos := get_local_mouse_position()
	var chosen = null
	for rect: Rect2i in rects:
		if rect.has_point(mouse_pos):
			chosen = rect
			break
	if chosen != null:
		var rect: Rect2i = chosen as Rect2i
		rects.erase(rect)
		for x in range(rect.position.x, rect.end.x, 16):
			for y in range(rect.position.y, rect.end.y, 16):
				rects.push_back(Rect2i(x, y, 16, 16))
		queue_redraw()

func _ready() -> void:
	selection_outline.clear()
	
	#await selection_outline.add_rect(Rect2i(16, 16, 16, 16))
	#await selection_outline.add_rect(Rect2i(32, 16, 16, 16))
	#await selection_outline.add_rect(Rect2i(16, 32, 16, 16))
	#await selection_outline.add_rect(Rect2i(32, 32, 16, 16))
	#await selection_outline.remove_rect(Rect2i(32, 32, 16, 16))
	#print(\"DONE\")
	#PerfManager.start(\"add tiles\")
	var tiles := tile_map.get_used_cells(0)
	tiles = []
	for x in 800/16:
		for y in 608/16:
			tiles.push_back(Vector2i(x, y))
	for tile in tiles:
		rects.push_back(Rect2i(tile * 16, Vector2i(16, 16)))
	#for tile in tiles:
		#var rect := Rect2i(tile * 32, Vector2i(32, 32))
		#selection_outline.add_rect(rect)
		#var base_rect := rect
		##for x in 10:
			##for y in 10:
				##rect = base_rect
				##rect.position.x += x * 22 * 32
				##rect.position.y += y * 16 * 32
				##selection_outline.add_rect(rect)
	#PerfManager.end(\"add tiles\")
	#PerfManager.start(\"remove tiles\")
	#for tile in tiles:
		#var rect := Rect2i(tile * 32, Vector2i(32, 32))
		#if randf() > 0.5:
			#selection_outline.remove_rect(rect)
	#PerfManager.end(\"remove tiles\")

func _draw() -> void:
	if _doing: return
	for rect in rects:
		var color = Color.ORANGE
		#var x = rect.position.x / 800.0
		#var y = rect.position.y / 608.0
		#var r = hash((Vector2(x*100, y*30)))/255.0
		#var g = hash(Vector3(x - 900, y * 342, (y+x)*99))/255.0
		#var b = hash(Vector2(y*100, x * 1000 + 500))/255.0
		#var color = Color(fposmod(r, 1), fposmod(g, 1), fposmod(b, 1), 1)
		draw_rect(rect, color)
		draw_rect(rect, Color.BLACK, false, 2)
	pass
"

[node name="Node2D" type="Node2D"]
script = SubResource("GDScript_y404o")

[node name="SelectionOutline" type="Node2D" parent="."]
unique_name_in_owner = true
script = ExtResource("1_5x8i0")

[node name="TileMap" type="TileMap" parent="."]
unique_name_in_owner = true
visible = false
tile_set = ExtResource("2_ioe1d")
format = 2
layer_0/tile_data = PackedInt32Array(196611, 65537, 1, 262147, 65537, 1, 262149, 65537, 1, 262151, 65537, 1, 262153, 65537, 1, 262155, 65537, 1, 196619, 65537, 1, 131083, 65537, 1, 327689, 65537, 1, 393225, 65537, 1, 458761, 65537, 1, 393229, 65537, 1, 458765, 65537, 1, 524301, 65537, 1, 589837, 65537, 1, 524289, 65537, 1, 589829, 65537, 1, 589830, 65537, 1, 393221, 65537, 1, 327685, 65537, 1, 327681, 65537, 1, 262145, 65537, 1, 196609, 65537, 1, 131073, 65537, 1, 131074, 65537, 1, 65538, 65537, 1, 65539, 65537, 1, 65540, 65537, 1, 65541, 65537, 1, 65542, 65537, 1, 65543, 65537, 1, 131079, 65537, 1, 196615, 65537, 1, 12, 65537, 1, 11, 65537, 1, 10, 65537, 1, 65546, 65537, 1, 65545, 65537, 1, 131081, 65537, 1, 262157, 65537, 1, 327697, 65537, 1, 262161, 65537, 1, 393233, 65537, 1, 655369, 65537, 1, 589833, 65537, 1, 589834, 65537, 1, 589832, 65537, 1, 655363, 65537, 1, 589827, 65537, 1, 458751, 65537, 1, 589839, 65537, 1, 14, 65537, 1, 15, 65537, 1, 16, 65537, 1, 65552, 65537, 1, 131088, 65537, 1, 131087, 65537, 1, 65551, 65537, 1, 65547, 65537, 1, 655360, 65537, 1, 720896, 65537, 1, 131075, 65537, 1, 131077, 65537, 1, 196613, 65537, 1, 327683, 65537, 1, 458755, 65537, 1, 589825, 65537, 1, 524291, 65537, 1, 458757, 65537, 1, 393223, 65537, 1, 524293, 65537, 1, 589828, 65537, 1, 655362, 65537, 1, 655364, 65537, 1, 524295, 65537, 1, 524297, 65537, 1, 524299, 65537, 1, 589835, 65537, 1, 655368, 65537, 1, 589836, 65537, 1, 524303, 65537, 1, 655371, 65537, 1, 589838, 65537, 1, 524304, 65537, 1, 458768, 65537, 1, 458767, 65537, 1, 393231, 65537, 1, 327695, 65537, 1, 196624, 65537, 1, 196623, 65537, 1, 262159, 65537, 1, 196625, 65537, 1, 196621, 65537, 1, 196617, 65537, 1, 65544, 65537, 1, 65549, 65537, 1, 13, 65537, 1, 131085, 65537, 1, 327693, 65537, 1, 327691, 65537, 1, 393227, 65537, 1, 458763, 65537, 1, 327687, 65537, 1, 393219, 65537, 1, 458759, 65537, 1, 393217, 65537, 1, 458753, 65537, 1, 589831, 65537, 1)
